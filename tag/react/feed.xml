<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/react/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2021-07-24T20:15:47+09:00</updated>
  <id>/tag/react/feed.xml</id>

  
  
  

  
    <title type="html">ArdoDulcis | </title>
  

  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">자식 컴포넌트를 쓰는 방식들</title>
      <link href="/using-react-component" rel="alternate" type="text/html" title="자식 컴포넌트를 쓰는 방식들" />
      <published>2021-01-09T09:00:00+09:00</published>
      <updated>2021-01-09T09:00:00+09:00</updated>
      <id>/using-react-component</id>
      <content type="html" xml:base="/using-react-component">&lt;p&gt;작년부터 React로 SPA개발하면서 자식 컴포넌트를 쓰는방식에 대해 의문점이 들었다. 자식 컴포넌트를 컴포넌트 내부에서 선언하고 바로 가져다 쓰는 방식과 컴포넌트 외부에서 자식 컴포넌트를 선언하거나 끌어다 쓰는 방식에 대한 것이었다. 분명히 차이가 있는데 무슨 차이가 있는지 어떤 상황에서 쓰면 좋을지 잘 몰라서 열심히 구글링 해보았지만 이렇다할 글이 없었다. 끝내 필자의 마음속의 &lt;a href=&quot;https://blog.shiren.dev/&quot;&gt;멘토&lt;/a&gt;이신 분께 따로 여쭈어보고 그 조언을 바탕으로 내 나름대로 &lt;strong&gt;이렇게 쓰면 좋겠다&lt;/strong&gt; 라는게 확립되어서 공유해보고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;자식-컴포넌트-child-component&quot;&gt;자식 컴포넌트 (Child Component)?&lt;/h2&gt;

&lt;p&gt;거창하게 자식 컴포넌트라고 써놓긴 했는데 진짜 별거없다. 그냥 메인이 되는 부모컴포넌트에서 렌더링시에 끌어다가 쓰는 컴포넌트라 보면 되겠다. 컴포넌트의 상하관계를 설명하기 위해서 쓰는 용어인거 같다. (아직 주니어 개발자라 솔직히 이 이상 정확하게 설명하기 어렵다 흑흑…)&lt;/p&gt;

&lt;h2 id=&quot;자식-컴포넌트를-쓰는-방식들&quot;&gt;자식 컴포넌트를 쓰는 방식들&lt;/h2&gt;

&lt;p&gt;React에서 컴포넌트를 끌어다 쓰는 방식은 필자의 지식 선에선 3가지 방법이 있다. 첫째 이미 만들어진 다른 컴포넌트를 import하여 끌어다 쓰는 방식. 둘째 메인 컴포넌트 (즉 부모가 되는 컴포넌트) 스코프 밖에서 다른 컴포넌트를 선언하여 끌어다 쓰는 방식. 마지막으로 컴포넌트 내부 스코프에서 컴포넌트를 선언하여 쓰는 방식. 이 3가지가 있다. 예제 코드를 보면서 차이점을 보자. (예제 코드는 최근 React의 대세라고 생각하는 React hook을 이용한 함수형 컴포넌트를 기반으로 썼다.)&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트를-import하는-경우&quot;&gt;컴포넌트를 import하는 경우&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./Components/AnyChild.tsx&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./Components/Parent.tsx&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./Components/AnyChild.tsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setParentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyChild&lt;/code&gt;라는 컴포넌트를 import하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;childState&lt;/code&gt;라는 props로 데이터를 할당하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트-외부-스코프에서-선언하여-쓰는-경우&quot;&gt;컴포넌트 외부 스코프에서 선언하여 쓰는 경우&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setParentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Parent&lt;/code&gt;라는 컴포넌트의 외부 스코프에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyChild&lt;/code&gt;라는 컴포넌트를 만들어 참조하여 쓰는 방식이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;childState&lt;/code&gt;라는 props로 데이터를 받아와서 렌더링하고 있다. 컴포넌트의 외부 스코프에서 직접 컴포넌트를 선언하여 쓰는 것 외에는 import하여 쓰는방식과 별반 차이가 없다.&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트-내부-스코프에서-선언하여-쓰는-경우&quot;&gt;컴포넌트 내부 스코프에서 선언하여 쓰는 경우&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setParentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;AnyChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AnyChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Parent&lt;/code&gt;라는 컴포넌트의 내부 스코프에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyChild&lt;/code&gt;라는 컴포넌트를 만들고 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyChild&lt;/code&gt;컴포넌트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Parent&lt;/code&gt;컴포넌트의 상태변수를 직접적으로 참조하고 있다. props로 데이터를 넘겨서 렌더링하는 위의 두 방식과는 확연히 차이가 난다.&lt;/p&gt;

&lt;h2 id=&quot;개인적인-견해&quot;&gt;개인적인 견해&lt;/h2&gt;

&lt;p&gt;결론부터 말하자면 컴포넌트의 목적과 성격에 맞게 쓰면 된다고 말하고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;첫째-import하여-컴포넌트를-끌어다-쓰는-방식&quot;&gt;첫째. import하여 컴포넌트를 끌어다 쓰는 방식&lt;/h3&gt;

&lt;p&gt;이 경우 재사용의 가능성이 높은 컴포넌트를 끌어다 쓸때 쓰면 좋을 것 같다. 딱히 다른 컴포넌트에서 import할 필요도 없는 재사용의 가능성이 0인 컴포넌트인데 별개의 파일로 만들어서 import하여 쓸경우 괜히 파일만 늘어나는 꼴이 된다.&lt;/p&gt;

&lt;h3 id=&quot;둘째-컴포넌트의-스코프-외부에서-선언하여-참조하여-쓰는-경우&quot;&gt;둘째. 컴포넌트의 스코프 외부에서 선언하여 참조하여 쓰는 경우&lt;/h3&gt;

&lt;p&gt;이 경우 재사용 가능성이 0지만 부모컴포넌트와 밀접한 관련이 있고 비즈니스 로직이 복잡하여 로직을 확연하게 구분할 필요성이 있을 경우 쓰면 좋을 것같다. 예를 들어 데이터가 부모컴포넌트에 의존하고 그 데이터를 기반으로 연산을 한다던지 input요소의 데이터가 부모컴포넌트의 데이터와 밀접한 관련이 있는데 데이터 조작을 위해 자식 컴포넌트의 상태만 갱신할 필요성이 있다던지 말이다. (이 부분은 최적화에도 연관이 있을것 같다.)&lt;/p&gt;

&lt;h3 id=&quot;마지막-컴포넌트-내부-스코프에-컴포넌트를-선언하여-쓰는-경우&quot;&gt;마지막. 컴포넌트 내부 스코프에 컴포넌트를 선언하여 쓰는 경우&lt;/h3&gt;

&lt;p&gt;이경우 재사용 가능성도 0, 부모컴포넌트의 데이터를 기반으로 보여주기만 하는 컴포넌트일 경우 쓰면 좋을 것 같다. 데이터를 조작할 필요도 없는데 props를 이용하여 데이터를 넘기는 건 너무 돌려 쓰는것 같고 해당 컴포넌트가 어디에 있는가도 확인해야 하며 개발자에게 “아 이 컴포넌트에서 무언갈 하고있구나” 라는 인식을 심어주고 확인했더니 아무것도 안하고 있으면 괜한 시간만 쓴 격이 되어 유지 보수 측면에서 안좋을 수도 있다. 물론 세번째 방식은 부모컴포넌트의 상태가 갱신될 경우 함수(컴포넌트)가 새롭게 정의 되니 메모리 관리 측면에서 안좋을 수도 있다. 하지만 스코프 체인을 통해 부모컴포넌트의 상태를 직접 참조 할수있고 자원을 공유할수있는 장점이 있고 파일안에서 코드를 파악하기 쉽다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;컴포넌트를 선언하고 끌어다 쓰는 방식은 여러가지가 있다. 솔직히 그냥 막 쓰면 된다. 그러나 자고로 개발자란 항상 설계를 염두에 두고 개발해야한다고 생각한다. 염두에 안두고 대충 막쓰면 나중에 프로젝트가 커지거나 코드 전체를 리팩토링해야 될 경우가 오면 설계를 염두에 안두고 막 쓴 자신이 정말 미워지기 시작한다. (필자도 이 github page로 블로그를 이전하기전에 next.js 기반으로 만든 블로그가 있는데 설계도 안하고 대충 막 개발했다가 리팩토링 하면서 엄청 후회한 경험이 있다. 결국 포기하고 github page로 도망왔다 ㅋㅋ)
그렇기에 컴포넌트를 만들거나 쓸때 어떤 상황에 써야 적합할지 어떻게 개발을 하면 좋을지 혹은 지금도 React로 개발을하면서 왜 이렇게 쓰는거지? 라는 고민을 고민을 가진 개발자분들께 도움이 되길 바라며 글을 마친다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ardo</name>
        
        
      </author>

      

      
        <category term="posts" />
      
        <category term="React" />
      
        <category term="FrontEnd" />
      

      
        <summary type="html">작년부터 React로 SPA개발하면서 자식 컴포넌트를 쓰는방식에 대해 의문점이 들었다. 자식 컴포넌트를 컴포넌트 내부에서 선언하고 바로 가져다 쓰는 방식과 컴포넌트 외부에서 자식 컴포넌트를 선언하거나 끌어다 쓰는 방식에 대한 것이었다. 분명히 차이가 있는데 무슨 차이가 있는지 어떤 상황에서 쓰면 좋을지 잘 몰라서 열심히 구글링 해보았지만 이렇다할 글이 없었다. 끝내 필자의 마음속의 멘토이신 분께 따로 여쭈어보고 그 조언을 바탕으로 내 나름대로 이렇게 쓰면 좋겠다 라는게 확립되어서 공유해보고자 한다. 자식 컴포넌트 (Child Component)? 거창하게 자식 컴포넌트라고 써놓긴 했는데 진짜 별거없다. 그냥 메인이 되는 부모컴포넌트에서 렌더링시에 끌어다가 쓰는 컴포넌트라 보면 되겠다. 컴포넌트의 상하관계를 설명하기 위해서 쓰는 용어인거 같다. (아직 주니어 개발자라 솔직히 이 이상 정확하게 설명하기 어렵다 흑흑…) 자식 컴포넌트를 쓰는 방식들 React에서 컴포넌트를 끌어다 쓰는 방식은 필자의 지식 선에선 3가지 방법이 있다. 첫째 이미 만들어진 다른 컴포넌트를 import하여 끌어다 쓰는 방식. 둘째 메인 컴포넌트 (즉 부모가 되는 컴포넌트) 스코프 밖에서 다른 컴포넌트를 선언하여 끌어다 쓰는 방식. 마지막으로 컴포넌트 내부 스코프에서 컴포넌트를 선언하여 쓰는 방식. 이 3가지가 있다. 예제 코드를 보면서 차이점을 보자. (예제 코드는 최근 React의 대세라고 생각하는 React hook을 이용한 함수형 컴포넌트를 기반으로 썼다.) 컴포넌트를 import하는 경우 // ./Components/AnyChild.tsx import React from &quot;react&quot;; const AnyChild: React.FC&amp;lt;{ childState: string, }&amp;gt; = ({ childState }) =&amp;gt; &amp;lt;div&amp;gt;{childState}&amp;lt;/div&amp;gt;; export default AnyChild; // ./Components/Parent.tsx import React, { useState } from &quot;react&quot;; import AnyChild from &quot;./Components/AnyChild.tsx&quot;; const Parent: React.FC = () =&amp;gt; { const [parentState, setParentState] = useState(&quot;&quot;); return &amp;lt;AnyChild childState={parentState} /&amp;gt;; }; 위의 방식은 AnyChild라는 컴포넌트를 import하여 childState라는 props로 데이터를 할당하고 있다. 컴포넌트 외부 스코프에서 선언하여 쓰는 경우 import React, { useState } from &quot;react&quot;; const AnyChild: React.FC&amp;lt;{ childState: string, }&amp;gt; = ({ childState }) =&amp;gt; &amp;lt;div&amp;gt;{childState}&amp;lt;/div&amp;gt;; const Parent: React.FC = () =&amp;gt; { const [parentState, setParentState] = useState(&quot;&quot;); return &amp;lt;AnyChild childState={parentState} /&amp;gt;; }; 위의 방식은 Parent라는 컴포넌트의 외부 스코프에 AnyChild라는 컴포넌트를 만들어 참조하여 쓰는 방식이다. childState라는 props로 데이터를 받아와서 렌더링하고 있다. 컴포넌트의 외부 스코프에서 직접 컴포넌트를 선언하여 쓰는 것 외에는 import하여 쓰는방식과 별반 차이가 없다. 컴포넌트 내부 스코프에서 선언하여 쓰는 경우 import React, { useState } from &quot;react&quot;; const Parent: React.FC = () =&amp;gt; { const [parentState, setParentState] = useState(&quot;&quot;); const AnyChild: React.FC = () =&amp;gt; &amp;lt;div&amp;gt;{parentState}&amp;lt;/div&amp;gt;; return &amp;lt;AnyChild /&amp;gt;; }; 위의 방식은 Parent라는 컴포넌트의 내부 스코프에 AnyChild라는 컴포넌트를 만들고 AnyChild컴포넌트에서 Parent컴포넌트의 상태변수를 직접적으로 참조하고 있다. props로 데이터를 넘겨서 렌더링하는 위의 두 방식과는 확연히 차이가 난다. 개인적인 견해 결론부터 말하자면 컴포넌트의 목적과 성격에 맞게 쓰면 된다고 말하고 싶다. 첫째. import하여 컴포넌트를 끌어다 쓰는 방식 이 경우 재사용의 가능성이 높은 컴포넌트를 끌어다 쓸때 쓰면 좋을 것 같다. 딱히 다른 컴포넌트에서 import할 필요도 없는 재사용의 가능성이 0인 컴포넌트인데 별개의 파일로 만들어서 import하여 쓸경우 괜히 파일만 늘어나는 꼴이 된다. 둘째. 컴포넌트의 스코프 외부에서 선언하여 참조하여 쓰는 경우 이 경우 재사용 가능성이 0지만 부모컴포넌트와 밀접한 관련이 있고 비즈니스 로직이 복잡하여 로직을 확연하게 구분할 필요성이 있을 경우 쓰면 좋을 것같다. 예를 들어 데이터가 부모컴포넌트에 의존하고 그 데이터를 기반으로 연산을 한다던지 input요소의 데이터가 부모컴포넌트의 데이터와 밀접한 관련이 있는데 데이터 조작을 위해 자식 컴포넌트의 상태만 갱신할 필요성이 있다던지 말이다. (이 부분은 최적화에도 연관이 있을것 같다.) 마지막. 컴포넌트 내부 스코프에 컴포넌트를 선언하여 쓰는 경우 이경우 재사용 가능성도 0, 부모컴포넌트의 데이터를 기반으로 보여주기만 하는 컴포넌트일 경우 쓰면 좋을 것 같다. 데이터를 조작할 필요도 없는데 props를 이용하여 데이터를 넘기는 건 너무 돌려 쓰는것 같고 해당 컴포넌트가 어디에 있는가도 확인해야 하며 개발자에게 “아 이 컴포넌트에서 무언갈 하고있구나” 라는 인식을 심어주고 확인했더니 아무것도 안하고 있으면 괜한 시간만 쓴 격이 되어 유지 보수 측면에서 안좋을 수도 있다. 물론 세번째 방식은 부모컴포넌트의 상태가 갱신될 경우 함수(컴포넌트)가 새롭게 정의 되니 메모리 관리 측면에서 안좋을 수도 있다. 하지만 스코프 체인을 통해 부모컴포넌트의 상태를 직접 참조 할수있고 자원을 공유할수있는 장점이 있고 파일안에서 코드를 파악하기 쉽다. 마치며 컴포넌트를 선언하고 끌어다 쓰는 방식은 여러가지가 있다. 솔직히 그냥 막 쓰면 된다. 그러나 자고로 개발자란 항상 설계를 염두에 두고 개발해야한다고 생각한다. 염두에 안두고 대충 막쓰면 나중에 프로젝트가 커지거나 코드 전체를 리팩토링해야 될 경우가 오면 설계를 염두에 안두고 막 쓴 자신이 정말 미워지기 시작한다. (필자도 이 github page로 블로그를 이전하기전에 next.js 기반으로 만든 블로그가 있는데 설계도 안하고 대충 막 개발했다가 리팩토링 하면서 엄청 후회한 경험이 있다. 결국 포기하고 github page로 도망왔다 ㅋㅋ) 그렇기에 컴포넌트를 만들거나 쓸때 어떤 상황에 써야 적합할지 어떻게 개발을 하면 좋을지 혹은 지금도 React로 개발을하면서 왜 이렇게 쓰는거지? 라는 고민을 고민을 가진 개발자분들께 도움이 되길 바라며 글을 마친다.</summary>
      

      
      
    </entry>
  
</feed>
